@page "/"

@inject ISender sender
@inject IDialogService Dialog
@inject ISnackbar Snackbar

@using Etn.MyLittleBoard.Application.Projects.Create
@using Etn.MyLittleBoard.Application.Projects.ListPaginated
@using Etn.MyLittleBoard.Domain.Aggregates.Projects
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>My Little Board</PageTitle>

<MudToolBar Class="justify-end" WrapContent="true" Gutters="false">
    <AuthorizeView Roles="@Role.Administrator">
        <Authorized>
            <MudButton StartIcon="@Icons.Material.Filled.CreateNewFolder" Color="Color.Primary" Variant="Variant.Filled" @onclick="@(() => CreateProject())">New</MudButton>
        </Authorized>
    </AuthorizeView>
</MudToolBar>

<MudPaper Elevation="0" Outlined="this.count < 1" class="relative d-flex flex-wrap justify-center justify-lg-space-between flex-grow-1 gap-6">
    <SpinnerOverlay Displayed="this.loading" />
    @foreach (var item in this.projects)
    {
        <MudCard Style="overflow: hidden;">
            <MudPaper Class="pa-8 d-flex justify-center" Elevation="0" Square="true" Style="background-color: var(--mud-palette-primary)">
                <MudText Typo="Typo.h2" Style="color:white">@item.Name.Value[0]</MudText>
            </MudPaper>
            <MudCardContent>
                <MudText Typo="Typo.h5">@item.Name</MudText>
                <MudText Typo="Typo.body2">Old paint found on a stone house door.</MudText>
                <MudText Typo="Typo.body2">This photo was taken in a small village in Istra Croatia.</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary">Share</MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
            </MudCardActions>
        </MudCard>
    }

    @if (this.count < 1)
    {
        <div class="d-flex justify-center align-center flex-column gap-10 pa-16" style="width: 100%">
            <MudIcon Icon="@Icons.Material.Outlined.FolderOff" Style="font-size: 4rem;" />
            <MudText>No open projects</MudText>
        </div>
    }
</MudPaper>

@if (this.count > 0)
{
    <div class="mt-6 d-flex justify-center">
        <MudPagination Rectangular="true" SelectedChanged="PageChanged" Disabled="this.loading" Count="@this.Pages" BoundaryCount="1" MiddleCount="3" />
    </div>
}

@code {
    private const int itemsPerPage = 6;
    private Project[] projects = [];
    private int count = 0;
    private int currentPage = 1;
    private bool loading = false;

    private int Pages => (int)Math.Ceiling((double)this.count / itemsPerPage);

    protected override async Task OnInitializedAsync()
    {
        await this.LoadProject();
    }

    private async Task LoadProject()
    {
        this.loading = true;
        ListPaginatedProjectsRequest listProjects = new((this.currentPage - 1) * itemsPerPage, itemsPerPage);
        Result<PageDto<Project>> result = await sender.Send(listProjects);
        if (result.IsSuccess)
        {
            this.count = result.Value.Count;
            this.projects = result.Value.Items;
            this.currentPage = result.Value.Skip / itemsPerPage + 1;
        }

        this.loading = false;
        this.StateHasChanged();
   }

    private async Task CreateProject()
    {
        IDialogReference dialog = await Dialog.ShowAsync<CreateProjectDialog>(
            "Create a new project",
            new DialogOptions() {
                MaxWidth = MaxWidth.Medium,
                CloseButton = true
            }
        );

        DialogResult? dialogResult = await dialog.Result;
        if (dialogResult is not null && !dialogResult.Canceled && dialogResult.Data is CreateProjectRequest createProjectRequest)
        {
            Result<ProjectId> result = await sender.Send(createProjectRequest);
            if (result.IsSuccess)
            {
                Snackbar.Add("Project created", Severity.Success);
                await this.LoadProject();
            }
            else{
                Snackbar.Add(result.ValidationErrors.First().ErrorMessage, Severity.Error);
            }
        }        
    }

    private async Task PageChanged(int i)
    {
        this.currentPage = i;
        await this.LoadProject();
    }
}
