@page "/"
@inject ISender sender
@inject IDialogService Dialog

@using Etn.MyLittleBoard.Application.Projects.Create
@using Etn.MyLittleBoard.Application.Projects.ListPaginated
@using Etn.MyLittleBoard.Domain.Aggregates.Projects
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>My Little Board</PageTitle>

<MudToolBar Class="justify-end" WrapContent="true" Gutters="false">
    <AuthorizeView Roles="@Role.Administrator">
        <Authorized>
            <MudButton StartIcon="@Icons.Material.Filled.CreateNewFolder" Color="Color.Primary" Variant="Variant.Filled" @onclick="@(() => CreateProject())">New</MudButton>
        </Authorized>
    </AuthorizeView>
</MudToolBar>

<div class="d-flex flex-wrap justify-center justify-lg-space-between flex-grow-1 gap-6">
@foreach (var item in this.projects)
{
        <MudCard Style="overflow: hidden;">
             <MudPaper Class="pa-8 d-flex justify-center" Elevation="0" Square="true" Style="background-color: var(--mud-palette-primary)">
                <MudText Typo="Typo.h2" Style="color:white">@item.Name.Value[0]</MudText>
             </MudPaper>
            <MudCardContent>
                <MudText Typo="Typo.h5">@item.Name</MudText>
                <MudText Typo="Typo.body2">Old paint found on a stone house door.</MudText>
                <MudText Typo="Typo.body2">This photo was taken in a small village in Istra Croatia.</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary">Share</MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
            </MudCardActions>
        </MudCard>
}
</div>

<div class="mt-6 d-flex justify-center">
    <MudPagination Rectangular="true" Count="6" BoundaryCount="1" MiddleCount="3" />
</div>

@code {
    private Project[] projects = [];

    protected override async Task OnInitializedAsync()
    {
        ListPaginatedProjectsRequest listProjects = new(0, 10);
        Result<Project[]> result = await sender.Send(listProjects);
        if (result.IsSuccess)
        {
            this.projects = result.Value;
        }
    }

    private async Task CreateProject()
    {
        IDialogReference dialog = await Dialog.ShowAsync<CreateProjectDialog>(
            "Create a new project",
            new DialogOptions() {
                MaxWidth = MaxWidth.Medium,
                CloseButton = true
            }
        );

        DialogResult? dialogResult = await dialog.Result;
        if (dialogResult is not null && !dialogResult.Canceled && dialogResult.Data is CreateProjectRequest createProjectRequest)
        {
            Result<ProjectId> result = await sender.Send(createProjectRequest);
            Console.WriteLine(result.Value);
        }        
    }
}
