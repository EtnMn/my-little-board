@page "/"

@inject ISender sender
@inject IDialogService Dialog
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

@using Etn.MyLittleBoard.Application.Projects.Create
@using Etn.MyLittleBoard.Application.Projects.ListPaginated
@using Etn.MyLittleBoard.Domain.Aggregates.Projects
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>My Little Board</PageTitle>

<MudToolBar WrapContent="true" Gutters="false" Class="mb-3">
    <MudText Typo="Typo.h1">Your projects</MudText>
    <MudSpacer />
    <AuthorizeView Roles="@Role.Administrator">
        <Authorized>
            <MudButton StartIcon="@Icons.Material.Filled.CreateNewFolder" Color="Color.Primary" Variant="Variant.Filled" @onclick="@(() => CreateProject())">New</MudButton>
        </Authorized>
    </AuthorizeView>
</MudToolBar>

<div>
    <div class="@($"{(this.count > 0 ? "cards-grid" : "")} gap-6 relative")" style="min-height: 250px;">
        <MudOverlay Visible="this.loading" LightBackground="true" Absolute="true">
            <MudProgressCircular Color="Color.Default" Size="Size.Large" Indeterminate="true" />
        </MudOverlay>
        @foreach (var item in this.projects)
        {
            <ProjectCard Project="@item" />
        }

        @if (this.count < 1 && this.initialized)
        {
            <div class="d-flex justify-center align-center flex-column gap-10 pa-16 border rounded" style="width: 100%; border-color: var(--mud-palette-lines-inputs)">
                <MudIcon Icon="@Icons.Material.Outlined.FolderOff" Style="font-size: 4rem;" />
                <MudText>No open projects</MudText>
            </div>
        }
    </div>
</div>

@if (this.count > 0)
{
    <div class="mt-6 d-flex justify-center">
        <MudPagination Rectangular="true" SelectedChanged="PageChanged" Disabled="this.loading" Count="@this.Pages" BoundaryCount="1" MiddleCount="3" />
    </div>
}

@code {
    private const int itemsPerPage = 6;
    private Project[] projects = [];
    private int count = 0;
    private int currentPage = 1;
    private bool loading = false;
    private bool initialized = false;

    private int Pages => (int)Math.Ceiling((double)this.count / itemsPerPage);

    protected override async Task OnInitializedAsync()
    {
        await this.LoadProject();
        this.initialized = true;
    }

    private async Task LoadProject()
    {
        this.loading = true;
        ListPaginatedProjectsRequest listProjects = new((this.currentPage - 1) * itemsPerPage, itemsPerPage);
        Result<PageDto<Project>> result = await sender.Send(listProjects);
        if (result.IsSuccess)
        {
            this.count = result.Value.Count;
            this.projects = result.Value.Items;
            this.currentPage = result.Value.Skip / itemsPerPage + 1;
        }

        this.loading = false;
        this.StateHasChanged();
    }

    private async Task CreateProject()
    {
        IDialogReference dialog = await Dialog.ShowAsync<CreateProjectDialog>(
            "Create a new project",
            new DialogOptions() {
                MaxWidth = MaxWidth.Medium,
                CloseButton = true
            }
        );

        DialogResult? dialogResult = await dialog.Result;
        if (dialogResult is not null && !dialogResult.Canceled && dialogResult.Data is CreateProjectRequest createProjectRequest)
        {
            Result<ProjectId> result = await sender.Send(createProjectRequest);
            if (result.IsSuccess)
            {
                Snackbar.Add("Project created", Severity.Success, config =>
                {
                    config.Action = "See";
                    config.ActionVariant = Variant.Text;
                    config.ActionColor = Color.Primary;
                    config.Onclick = s =>
                    {
                        NavigationManager.NavigateTo($"/project/{result.Value}");
                        return Task.CompletedTask;
                    };
                });
                await this.LoadProject();
            }
            else{
                Snackbar.Add(result.ValidationErrors.First().ErrorMessage, Severity.Error);
            }
        }        
    }

    private async Task PageChanged(int i)
    {
        this.currentPage = i;
        await this.LoadProject();
    }
}
