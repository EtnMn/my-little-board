@page "/settings"
@page "/settings/clients"
@layout SettingsLayout

@inject ISender sender
@inject IDialogService Dialog
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = Role.Administrator)]

@using Etn.MyLittleBoard.Application.Clients.Create
@using Etn.MyLittleBoard.Domain.Aggregates.Clients
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>Client settings | My Little Board</PageTitle>

<MudToolBar WrapContent="true" Gutters="false" Class="mb-3">
    <MudText Typo="Typo.h1">Clients</MudText>
    <MudSpacer />
    <AuthorizeView Roles="@Role.Administrator">
        <Authorized>
            <MudButton StartIcon="@Icons.Material.Outlined.AddBox" Color="Color.Primary" Variant="Variant.Filled" @onclick="@(() => CreateClient())">New</MudButton>
        </Authorized>
    </AuthorizeView>
</MudToolBar>

<MudStack Row="true" Class="mb-4" StretchItems="StretchItems.All">
    <MudCard>
        <MudCardContent>
            <MudText>Story of the day</MudText>
            <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
        </MudCardActions>
    </MudCard>
    <MudCard>
        <MudCardContent>
            <MudText>Story of the day</MudText>
            <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
        </MudCardActions>
    </MudCard>
</MudStack>

<MudTable ServerData="ServerReload" Hover="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="nr_field" T="Employee">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="sign_field" T="Employee">Position</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="Employee">YearsEmployed</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="position_field" T="Employee">Salary</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="mass_field" T="Employee">Rating</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Sign">@context.Position</MudTd>
        <MudTd DataLabel="YearsEmployed">@context.YearsEmployed</MudTd>
        <MudTd DataLabel="Salary">@context.Salary</MudTd>
        <MudTd DataLabel="Molar mass">@context.Rating</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    public record Employee(string Name, string Position, int YearsEmployed, int Salary, int Rating);
    public IEnumerable<Employee> employees = [];

    private async Task CreateClient()
    {
        IDialogReference dialog = await Dialog.ShowAsync<CreateClientDialog>(
            "Create a new client",
            new DialogOptions()
                {
                    FullWidth = true,
                    MaxWidth = MaxWidth.Medium,
                    CloseButton = true
                }
        );

        DialogResult? dialogResult = await dialog.Result;
        if (dialogResult is not null && !dialogResult.Canceled && dialogResult.Data is CreateClientRequest createClientRequest)
        {
            Result<ClientId> result = await sender.Send(createClientRequest);
            if (result.IsSuccess)
            {
                Snackbar.Add("Client created", Severity.Success, config =>
                {
                    config.Action = "See";
                    config.ActionVariant = Variant.Text;
                    config.ActionColor = Color.Primary;
                    config.Onclick = s =>
                    {
                        NavigationManager.NavigateTo($"/client/{result.Value}");
                        return Task.CompletedTask;
                    };
                });
                // await this.LoadProject();
            }
            else
            {
                Snackbar.Add(result.ValidationErrors.First().ErrorMessage, Severity.Error);
            }
        }
    }

    private async Task<TableData<Employee>> ServerReload(TableState state, CancellationToken token)
    {
        // Forward the provided token to methods which support it
        employees = new List<Employee>
        {
            new Employee("Sam", "CPA", 23, 87_000, 4),
            new Employee("Alicia", "Product Manager", 11, 143_000, 5),
            new Employee("Ira", "Developer", 4, 92_000, 3),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
            new Employee("John", "IT Director", 17, 229_000, 4),
        };

        // Simulate a long-running operation
        await Task.Delay(300, token);
        // Get the total count
        var totalItems = employees.Count();
        // Get the paged data
        var pagedData = employees.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
        // Return the data
        return new TableData<Employee>() { TotalItems = totalItems, Items = pagedData };
    }
}
