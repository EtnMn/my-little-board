@page "/settings"
@page "/settings/clients"
@layout SettingsLayout

@inject ISender sender
@inject IDialogService Dialog
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = Role.Administrator)]

@using Etn.MyLittleBoard.Application.Clients.CountActive
@using Etn.MyLittleBoard.Application.Clients.Create
@using Etn.MyLittleBoard.Application.Clients.Delete
@using Etn.MyLittleBoard.Application.Clients.Edit
@using Etn.MyLittleBoard.Application.Clients.EditState
@using Etn.MyLittleBoard.Application.Clients.ListPaginated
@using Etn.MyLittleBoard.Domain.Aggregates.Clients
@using Etn.MyLittleBoard.Server.Components.Shared.DashboardCards
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>Client settings | My Little Board</PageTitle>

<DashboardCardGrid Cards="cards" Context="c">
    <CardTemplate>
        <DashboardCard Title="@c.Name" Icon="@c.Icon" Text="@c.Text" Color="@c.Color" />
    </CardTemplate>
</DashboardCardGrid>

<MudToolBar WrapContent="true" Gutters="false" Class="mb-3">
    <MudText Typo="Typo.h1">Clients</MudText>
</MudToolBar>
<MudTable ServerData="LoadClients" Hover="true" LoadingProgressColor="Color.Primary" RowsPerPage="10" @ref="clientTable">
    <ToolBarContent>
        <MudTextField T="string" Immediate="true" DebounceInterval="300" ValueChanged="@(s=>OnClientSearch(s))" Clearable="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
        <MudSpacer />
        <MudButton StartIcon="@Icons.Material.Outlined.AddBox" Color="Color.Primary" Variant="Variant.Filled" @onclick="@(() => CreateClient())">New</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="name" T="Client">Name</MudTableSortLabel></MudTh>
        <MudTh /> @* No header for actions column. *@
    </HeaderContent>
    <RowTemplate>
        @if (context.State.Value)
        {
            <MudTd DataLabel="Name"><MudText>@context.Name</MudText></MudTd>
        }
        else
        {
            <MudTd DataLabel="Name">
                <div class="d-flex align-center gap-2">
                    <MudText Style="color: var(--mud-palette-text-disabled)">@context.Name</MudText>
                    <MudChip T="string" Variant="Variant.Outlined" Disabled="true" Size="Size.Small" Label="true">Disabled</MudChip>
                </div>
            </MudTd>

        }
        <MudTd DataLabel="State" Style="text-align: right;">
            <MudMenu Icon="@Icons.Material.Filled.MoreHoriz" AriaLabel="Client settings menu">
                @if (context.State.Value)
                {
                    <MudMenuItem @onclick="() => this.EditClient(context)">Edit</MudMenuItem>
                    <MudMenuItem @onclick="() => this.EditClientState(context.Id, false)">Disable</MudMenuItem>
                }
                else
                {
                    <MudMenuItem @onclick="() => this.EditClientState(context.Id, true)">Enable</MudMenuItem>
                }

                <MudMenuItem Class="mud-error-text" @onclick="() => this.DeleteClient(context.Id)">Delete</MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching items</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager HideRowsPerPage="true" HidePageNumber="true" />
    </PagerContent>
</MudTable>

@code {
    private MudTable<Client> clientTable = default!;
    private MudTheme theme = new MudTheme();
    private string search = string.Empty;
    private List<Shared.DashboardCards.Card> cards = [];

    private async Task CountActiveClients(){
        CountActiveClientsRequest request = new();
        Result<int> result = await sender.Send(request);

        this.cards.Clear();
        if (result.IsSuccess)
        {
            this.cards.Add(new Shared.DashboardCards.Card
                {
                    Name = "Active clients",
                    Text = result.Value.ToString(),
                    Icon = Icons.Material.Outlined.Wallet,
                    Color = Color.Primary
                });
        }

        this.StateHasChanged();
    }

    private async Task CreateClient()
    {
        IDialogReference dialog = await Dialog.ShowAsync<CreateClientDialog>(
            "Create a new client",
            new DialogOptions()
                {
                    FullWidth = true,
                    MaxWidth = MaxWidth.Medium,
                    CloseButton = true
                }
        );

        DialogResult? dialogResult = await dialog.Result;
        if (dialogResult is not null && !dialogResult.Canceled && dialogResult.Data is CreateClientRequest createClientRequest)
        {
            Result<ClientId> result = await sender.Send(createClientRequest);
            if (result.IsSuccess)
            {
                this.Snackbar.Add("Client created", Severity.Success);
                await this.clientTable.ReloadServerData();
                await this.CountActiveClients();
            }
            else
            {
                this.Snackbar.Add(result.ValidationErrors.First().ErrorMessage, Severity.Error);
            }
        }
    }

    private async Task<TableData<Client>> LoadClients(TableState state, CancellationToken token)
    {
        ListPaginatedClientsRequest request = new(
            this.search,
            (state.Page) * state.PageSize,
            state.PageSize,
            state.SortDirection == SortDirection.Descending)
            {
                ExcludeDisabled = false,
            };

        await this.CountActiveClients();

        Result<PageDto<Client>> result = await sender.Send(request);
        if (result.IsSuccess)
        {
            return new TableData<Client>() { TotalItems = result.Value.Count, Items = result.Value.Items };
        }
        else
        {
            this.Snackbar.Add(result.ValidationErrors.First().ErrorMessage, Severity.Error);

            return new TableData<Client>() { TotalItems = 0, Items = [] };
        }
    }

    private async Task EditClientState(ClientId clientId, bool value)
    {
        EditClientStateRequest request = new(clientId.Value, value);
        Result result = await sender.Send(request);
        await this.clientTable.ReloadServerData();

        if (result.IsSuccess)
        {
            await this.CountActiveClients();
        }
        else
        {
            this.Snackbar.Add(result.ValidationErrors.First().ErrorMessage, Severity.Error);
        }
    }

    private async Task EditClient(Client client)
    {
        DialogParameters<EditClientDialog> parameters = new() { { x => x.Client, client } };
        IDialogReference dialog = await Dialog.ShowAsync<EditClientDialog>(
            "Edit client",
            parameters,
            new DialogOptions()
                {
                    FullWidth = true,
                    MaxWidth = MaxWidth.Medium,
                    CloseButton = true
                }
        );

        DialogResult? dialogResult = await dialog.Result;
        if (dialogResult is not null && !dialogResult.Canceled && dialogResult.Data is EditClientRequest editClientRequest)
        {
            Result result = await sender.Send(editClientRequest);
            if (result.IsSuccess)
            {
                Snackbar.Add("Client saved", Severity.Success);
                await this.clientTable.ReloadServerData();
            }
            else
            {
                Snackbar.Add(result.ValidationErrors.First().ErrorMessage, Severity.Error);
            }
        }
    }

    private async Task DeleteClient(ClientId clientId)
    {
        DialogParameters<ConfirmDialog> parameters = new()
        {
            { x => x.ContentText, "Do you really want to delete these client? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        DialogOptions options = new() { FullWidth = true, CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        IDialogReference dialog = await this.Dialog.ShowAsync<ConfirmDialog>("Delete", parameters, options);
        DialogResult? dialogResult = await dialog.Result;
        if (dialogResult is not null && !dialogResult.Canceled)
        {
            DeleteClientRequest request = new(clientId.Value);
            Result result = await this.sender.Send(request);
            if (result.IsSuccess)
            {

                this.Snackbar.Add("Client deleted", Severity.Success);
                await this.clientTable.ReloadServerData();
                await this.CountActiveClients();
            }
            else
            {
                this.Snackbar.Add(result.ValidationErrors.First().ErrorMessage, Severity.Error);
            }
        }

    }

    private void OnClientSearch(string text)
    {
        this.search = text;
        this.clientTable.ReloadServerData();
    }
}
