@using Etn.MyLittleBoard.Application.Clients.GetById
@using Etn.MyLittleBoard.Application.Clients.ListPaginated
@using Etn.MyLittleBoard.Application.Projects.Edit
@using Etn.MyLittleBoard.Domain.Aggregates.Clients
@using Etn.MyLittleBoard.Domain.Aggregates.Projects

@inject ISender sender

<MudDialog DefaultFocus="DefaultFocus.FirstChild">
    <DialogContent>
        @if (this.projectRequest is not null)
        {
            <MudForm Model="@projectRequest" @ref="@form" Validation="@(validator.Validation)" Spacing="6" Class="mb-4">
                <MudTextField @bind-Value="this.projectRequest.Name" Required="true" Immediate="true" For="@(() => this.projectRequest.Name)" Label="Name" Variant="Variant.Text" MaxLength="25" />
                <MudTextField @bind-Value="this.projectRequest.Description" Immediate="true" For="@(() => this.projectRequest.Description)" Label="Description" Variant="Variant.Text" MaxLength="300" AutoGrow />
                <ColorSelect @bind-Value="this.projectRequest.Color" id="color" />
                <div class="d-flex flex-wrap gap-4">
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Start" @bind-Date="this.projectRequest.Start" For="@(() => this.projectRequest.Start)" Clearable="true" Placeholder="Select start date" DateFormat="dd MMM yyyy" />
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="End" @bind-Date="this.projectRequest.End" For="@(() => this.projectRequest.End)" Clearable="true" Placeholder=" Select end date" DateFormat="dd MMM yyyy" />
                </div>
                <MudAutocomplete T="int?" Label="Client" @bind-Value="this.projectRequest.ClientId" For="@(() => this.projectRequest.ClientId)" SearchFunc="@Search" ToStringFunc="@(x=> x.HasValue && this.clients.ContainsKey(x.Value) ? $"{this.clients[x.Value]}" : "")" ResetValueOnEmptyText="true" Clearable="true" />
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        <MudButton @onclick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="@(async () => await Submit())">Save changes</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private readonly FluentValueValidator<EditProjectValidator, EditProjectRequest> validator = new(new());
    private MudForm form = default!;
    private EditProjectRequest? projectRequest;
    private Dictionary<int, string> clients = new();

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter, EditorRequired]
    public Project? Project { get; set; }

    protected override void OnParametersSet()
    {
        if (this.Project is not null)
        {
            this.projectRequest = new EditProjectRequest(this.Project.Id.Value);
            this.projectRequest.Name = this.Project.Name.Value;
            this.projectRequest.Description = this.Project.Description.Value;
            this.projectRequest.Color = this.Project.Color.Value;
            this.projectRequest.Start =  this.Project.Start != ProjectStart.Unspecified ? this.Project.Start.Value : null;
            this.projectRequest.End = this.Project.End != ProjectEnd.Unspecified ? this.Project.End.Value : null;
            this.projectRequest.ClientId = this.Project.ClientId != ProjectClientId.Unspecified ? this.Project.ClientId.Value : null; 
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (this.Project is not null && this.Project.ClientId != ProjectClientId.Unspecified)
        {
            GetClientByIdRequest request = new(this.Project.ClientId.Value);
            Result<Client> result = await sender.Send(request);
            if (result.IsSuccess)
            {
                this.clients.TryAdd(result.Value.Id.Value, result.Value.Name.Value);
            }
        }
    }

    private async Task<IEnumerable<int?>> Search(string value, CancellationToken cancellationToken)
    {
        ListPaginatedClientsRequest request = new(value ?? string.Empty, 0, 10, false);
        Result<PageDto<Client>> result = await sender.Send(request, cancellationToken);
        this.clients = result.Value.Items.ToDictionary(k => k.Id.Value, v => v.Name.Value);

        return result.Value.Items.Select<Client, int?>(i => i.Id.Value);
    }

    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid && this.projectRequest is not null)
        {
            MudDialog.Close(DialogResult.Ok(projectRequest));
        }
    }

    private void Cancel() => MudDialog.Cancel();

}
