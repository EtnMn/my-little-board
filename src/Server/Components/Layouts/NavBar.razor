@using Etn.MyLittleBoard.Application.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Identity.Web
@using System.Security.Claims

@implements IDisposable

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService

<MudAppBar Elevation="1">
    <MudLink Href="/" Class="d-inline-flex align-center">
        <MudImage Src="favicon.png" Width="40" Height="40" Alt="My Little Board logo" />
        <MudText Typo="Typo.h6" Class="ml-3 mud-appbar">My Little Board</MudText>
    </MudLink>

    <MudSpacer />

    @* Todo: OnClick issue. https://github.com/dotnet/razor/issues/10896 *@
    <MudButton @onclick="@(() => drawer = !drawer)">
        <UserAvatar Source="@this.AvatarSource">@Initials</UserAvatar>
    </MudButton>

    <div>
        <MudDrawer Class="nav-drawer" @bind-Open="drawer" Elevation="2" Variant="@DrawerVariant.Temporary" Anchor="Anchor.Right">
            <MudDrawerHeader Class="px-3 pt-3 align-center " aria-label="User navigation" role="heading" aria-level="1">
                <div class="d-flex flex-1 gap-x-1">
                    <AuthorizeView>
                        <UserAvatar Source="@this.AvatarSource">@Initials</UserAvatar>
                        <div class="d-flex flex-column px-2">
                            <MudText Typo="Typo.body1">@this.Name</MudText>
                            @if (!string.IsNullOrEmpty(@context.User.Identity?.Name))
                            {
                                <MudText Typo="Typo.body2" Class="mud-text-secondary">@context.User.Identity?.Name</MudText>
                            }
                        </div>
                    </AuthorizeView>
                </div>
                <MudIconButton Icon="@Icons.Material.Filled.Close" aria-label="Close drawer" Size="Size.Small" @onclick="@(() => drawer = !drawer)" />
            </MudDrawerHeader>
            <MudNavMenu>
                <MudDivider Class="my-2" DividerType="DividerType.Middle" />
                <MudNavLink Href="/" Icon="@Icons.Material.Outlined.Home">Home</MudNavLink>
                <AuthorizeView Roles="@Role.Administrator">
                    <MudNavLink Href="/administration" Icon="@Icons.Material.Outlined.Settings">Administration</MudNavLink>
                </AuthorizeView>

                <MudDivider Class="my-2" DividerType="DividerType.Middle" />
                <MudNavLink @onclick="@(async ()=> await this.OnDarkModeToggled.InvokeAsync(!this.DarkMode))" Icon="@(this.DarkMode ? Icons.Material.Outlined.WbSunny : Icons.Material.Outlined.Nightlight)">
                    @(this.DarkMode ? "Light mode" : "Dark mode")
                </MudNavLink>

                <MudDivider Class="my-2" DividerType="DividerType.Middle" />
                <form action="authentication/logout" method="post">
                    <AntiforgeryToken />
                    <MudButton Variant="Variant.Text" ButtonType="@ButtonType.Submit" Class="mud-nav-link">
                        <MudIcon Icon="@Icons.Material.Filled.Logout" Title="Log out" Class="mud-nav-link-icon mud-nav-link-icon-default"></MudIcon>
                        <div class="mud-nav-link-text">Log out</div>
                    </MudButton>
                </form>
            </MudNavMenu>
        </MudDrawer>
    </div>
</MudAppBar>

@code {
    private bool drawer = false;
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private ClaimsPrincipal? claimsPrincipal;
    private string? photo64;

    [Parameter]
    public bool DarkMode { get; set; }

    [Parameter]
    public EventCallback<bool> OnDarkModeToggled { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private string AvatarSource => this.photo64 is not null ? $"data:image/png;base64,{this.photo64}" : string.Empty;

    private string Initials => this.Name?[0].ToString() ?? string.Empty;

    private string Name => this.claimsPrincipal?.Claims.FirstOrDefault(c => c.Type == CustomClaims.Name)?.Value ?? string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (this.AuthenticationState is not null)
        {
            var authState = await this.AuthenticationState;
            this.claimsPrincipal = authState.User;
        }        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AuthenticationState authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authenticationState.User.Identity?.IsAuthenticated == true)
            {
                this.photo64 = await UserService.GetUserPhoto64(this.cancellationTokenSource.Token);
                this.StateHasChanged();
            }
        }
    }

    public void Dispose()
    {
        this.cancellationTokenSource.Dispose();
    }
}
